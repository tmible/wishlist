import { Markup } from 'telegraf';
import MessagePurposeType from '@tmible/wishlist-bot/constants/message-purpose-type';
import { sendMessageAndMarkItForMarkupRemove } from '@tmible/wishlist-bot/helpers/middlewares/remove-markup';

/**
 * @typedef {
 *   import('@tmible/wishlist-bot/helpers/configure-modules').ModuleConfigureFunction
 * } ModuleConfigureFunction
 * @typedef {
 *   import('@tmible/wishlist-bot/helpers/configure-modules').ModuleMessageHandler
 * } ModuleMessageHandler
 */

/** @type {ModuleConfigureFunction} */
const configure = (bot) => {
  /**
   * –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
   * —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç–∞
   */
  bot.action(/^answer ([\d-]+) ([\d-]+)$/, (ctx) => {
    ctx.session.messagePurpose = {
      type: MessagePurposeType.AnonymousMessageAnswer,
      payload: {
        answerChatId: Number.parseInt(ctx.match[1]),
        answerToMessageId: Number.parseInt(ctx.match[2]),
      },
    };
    return sendMessageAndMarkItForMarkupRemove(
      ctx,
      'reply',
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ',
      Markup.inlineKeyboard([ Markup.button.callback('üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç', 'cancel_answer') ]),
    );
  });
};

/** @type {ModuleMessageHandler} */
const messageHandler = (bot) => {
  /**
   * –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
   */
  bot.on('message', async (ctx, next) => {
    if (ctx.session.messagePurpose?.type === MessagePurposeType.AnonymousMessageAnswer) {
      const { answerChatId, answerToMessageId } = ctx.session.messagePurpose.payload;
      await ctx.telegram.sendMessage(
        answerChatId,
        '–û—Ç–≤–µ—Ç:',
        { reply_to_message_id: answerToMessageId },
      );

      await ctx.forwardMessage(answerChatId, ctx.chat.id, ctx.message.message_id);

      delete ctx.session.messagePurpose;
      return ctx.reply('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    }

    return next();
  });
};

export default { configure, messageHandler };
