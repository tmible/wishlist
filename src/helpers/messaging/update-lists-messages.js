import { strict as assert } from 'node:assert';
import { nwAlign } from 'seal-wasm';
import { Markup } from 'telegraf';
import tryPinning from '@tmible/wishlist-bot/helpers/messaging/try-pinning';
import {
  sendMessageAndMarkItForMarkupRemove,
} from '@tmible/wishlist-bot/helpers/middlewares/remove-markup';

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è [–∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ù–∏–¥–ª–º–∞–Ω–∞-–í—É–Ω—à–∞]{@link nwAlign}: —Ç–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è,
 * –ø–æ—Ö–æ–∂–µ—Å—Ç—å —Ä–∞–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã,
 * —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –≤ –ø–µ—Ä–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @constant {Partial<{
 *   alignment: 'local' | 'global';
 *   equal: number;
 *   align: number;
 *   insert: number;
 *   delete: number;
 * }>}
 */
const NWAlignOptions = { alignment: 'global', equal: 1, align: 0, insert: -2, delete: -3 };

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ –≤–µ—Ä—Å–∏–∏
 * @function checkIfMessageChanged
 * @param {Object} messageToEdit –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {Message} message –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @returns {boolean} –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
const checkIfMessageChanged = (messageToEdit, message) => {
  let areEntitiesEqual = true;
  let areReplyMarkupsEqual = true;

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è
   * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–º–µ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  try {
    assert.deepEqual(
      messageToEdit.entities.filter(({ type }) => type !== 'url'),
      message[0].entities.filter(({ type }) => type !== 'url'),
    );
  } catch {
    areEntitiesEqual = false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫,
   * —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –æ–ø—É—Å–∫–∞—é—Ç—Å—è –¢–µ–ª–µ–≥—Ä–∞–º–æ–º
   */
  try {
    assert.deepEqual(
      messageToEdit.reply_markup?.inline_keyboard.map((row) =>
        row.map((button) => ({ text: button.text, callback_data: button.callback_data }))
      ),
      message[1]?.reply_markup.inline_keyboard.map((row) =>
        row.map((button) => ({ text: button.text, callback_data: button.callback_data }))
      ),
    );
  } catch {
    areReplyMarkupsEqual = false;
  }

  if (messageToEdit.text !== message[0].text || !areEntitiesEqual || !areReplyMarkupsEqual) {
    return true;
  }

  return false;
};

/**
 * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ
 * —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ [–ù–∏–¥–ª–º–∞–Ω–∞-–í—É–Ω—à–∞]{@link nwAlign}
 * —Å —Ç–∞–∫–∏–º–∏ [–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏]{@link NWAlignOptions}, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤,
 * —Ç–∞–∫ –∫–∞–∫ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª–∏–Ω–∏—Ç—å –Ω–æ–≤—ã–µ.
 * –û–±–∞ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –∫–∞–∂–¥–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–¥–∞—Ä–∫–∞
 * —Å—Ç–∞–≤–∏—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
 * @async
 * @function alignItemsIds
 * @param {Object[]} messagesToEdit –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Message[]} messages –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {stirng} –°—Ç—Ä–æ–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª—ã `=`, `!`, `-`.
 * `=` –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, `!` -- —Ä–∞–∑–ª–∏—á–∏–µ,
 * `-` -- –ø—Ä–æ–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 * –í–æ–∑–º–æ–∂–µ–Ω –µ—â—ë `+`, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–π –ø—Ä–æ–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
 * –Ω–æ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ -- –±–∞–≥
 */
const alignItemsIds = async (messagesToEdit, messages) => {
  const itemsIdsMap = new Map(messagesToEdit.map(({ itemId }, i) => [ itemId, i ]));
  messages.forEach(({ itemId }) => {
    if (itemsIdsMap.has(itemId)) {
      return;
    }
    itemsIdsMap.set(itemId, itemsIdsMap.size);
  });

  const { representation } = await nwAlign(
    messagesToEdit.map(({ itemId }) => String.fromCharCode(itemsIdsMap.get(itemId))).join(''),
    messages.map(({ itemId }) => String.fromCharCode(itemsIdsMap.get(itemId))).join(''),
    NWAlignOptions,
  );

  return representation;
};

/**
 * 1. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ, —Å—Ç—Ä–æ–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
 * (—Å–º. –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {@link alignItemsIds}) –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ, –µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–µ,
 * [–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –ù–∏–¥–ª–º–∞–Ω–∞-–í—É—à–Ω–∞]{@link alignItemsIds}.
 * 2. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±–Ω–æ–≤–∞–ª–µ–Ω–∏–µ–º –æ–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏.
 * 3. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.
 * @async
 * @function editMessages
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -- –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–ø–∏—Å–∫–∞
 * @param {Message[]} messages –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º
 * @param {boolean} shouldSendNotification –ü—Ä–∏–∑–Ω–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 */
const editMessages = async (ctx, userid, messages, shouldSendNotification) => {
  const { messagesToEdit } = ctx.session.persistent.lists[userid];

  const alignmentRepresentation = messagesToEdit.length === messages.length ?
    messagesToEdit.map(({ itemId }, i) => itemId === messages[i].itemId ? '=' : '!').join('') :
    await alignItemsIds(messagesToEdit, messages);

  const sessionPatch = [];
  let messagesIndex = 0;

  await Promise.all(
    alignmentRepresentation.split('').reduce((promises, char, i) => {
      const messageToEdit = messagesToEdit[i];
      const { itemId, message } = messages[messagesIndex];

      if (char === '-') {
        promises.push(ctx.deleteMessage(messageToEdit.id));
      } else if (char === '!' || char === '=') {
        messagesIndex += 1;

        sessionPatch.push({
          ...messageToEdit,
          itemId,
          text: message[0].text,
          entities: message[0].entities,
          reply_markup: message[1]?.reply_markup,
        });

        if (char === '!' || (char === '=' && checkIfMessageChanged(messageToEdit, message))) {
          promises.push(ctx.telegram.editMessageText(
            ctx.chat.id,
            messageToEdit.id,
            undefined,
            ...message,
          ));
        }
      }

      return promises;
    }, []),
  );

  ctx.session.persistent.lists[userid].messagesToEdit = sessionPatch;

  if (shouldSendNotification) {
    await sendMessageAndMarkItForMarkupRemove(
      ctx,
      'reply',
      '–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω',
      {
        ...Markup.inlineKeyboard([
          Markup.button.callback(
            'üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            `force_${
              userid === ctx.chat.id ? 'own_' : ''
            }list${
              userid === ctx.chat.id ? '' : ` ${userid}`
            }`,
          ),
        ]),
        reply_to_message_id: ctx.session.persistent.lists[userid].pinnedMessageId,
      },
    );
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞. –ü–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
 * [–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π]{@link editMessages}.
 * @async
 * @function updateListsMessages
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -- –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–ø–∏—Å–∫–∞
 * @param {Message[]} messages –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º
 * @param {boolean} shouldSendNotification –ü—Ä–∏–∑–Ω–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 */
const updateListsMessages = async (ctx, userid, messages, shouldSendNotification) => {
  await tryPinning(ctx, 'pinChatMessage', ctx.session.persistent.lists[userid].pinnedMessageId);
  await editMessages(ctx, userid, messages, shouldSendNotification);
};

export default updateListsMessages;
