import { inject } from '@tmible/wishlist-common/dependency-injector';
import { Markup } from 'telegraf';
import Events from '@tmible/wishlist-bot/architecture/events';
import InjectionToken from '@tmible/wishlist-bot/architecture/injection-token';
import MessagePurposeType from '@tmible/wishlist-bot/constants/message-purpose-type';
import getUseridFromInput from '@tmible/wishlist-bot/helpers/get-userid-from-input';
import isChatGroup from '@tmible/wishlist-bot/helpers/is-chat-group';
import isUserInChat from '@tmible/wishlist-bot/helpers/is-user-in-chat';
import { sendMessageAndMarkItForMarkupRemove } from '@tmible/wishlist-bot/helpers/middlewares/remove-markup';
import sendList from './helpers/send-list.js';

/**
 * @typedef {import('telegraf').Context} Context
 * @typedef {
 *   import('@tmible/wishlist-bot/architecture/configure-modules').ModuleConfigureFunction
 * } ModuleConfigureFunction
 * @typedef {
 *   import('@tmible/wishlist-bot/architecture/configure-modules').ModuleMessageHandler
 * } ModuleMessageHandler
 * @typedef {import('@tmible/wishlist-bot/architecture/event-bus').EventBus} EventBus
 */

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π
 * 1. –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–ø–∏—Å–∫–∞ –µ—Å—Ç—å –≤ –Ω–µ–π;
 * 2. –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ;
 *    —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–æ–π;
 * @function handleListCommand
 * @param {EventBus} eventBus –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} [userid] –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
 * @returns {Promise<boolean>} –ü—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
 * @async
 */
const handleListCommand = async (eventBus, ctx, userid) => {
  if (await isUserInChat(ctx, userid)) {
    await ctx.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!');
    return false;
  }

  if (userid === ctx.from.id) {
    if (isChatGroup(ctx)) {
      return false;
    }
    await eventBus.emit(Events.Wishlist.HandleOwnList, ctx);
    return false;
  }

  return true;
};

/**
 * –ó–∞–ø—É—Å–∫ [–ø—Ä–æ–≤–µ—Ä–æ–∫]{@link handleListCommand} –∏ –ø—Ä–∏ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏,
 * –µ—Å–ª–∏ —É –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è,
 * –∏–Ω–∞—á–µ –±–æ—Ç [–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ø–∏—Å–æ–∫]{@link sendList}
 * @function listCommandHandler
 * @param {EventBus} eventBus –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @returns {Promise<void>}
 * @async
 */
const listCommandHandler = async (eventBus, ctx) => {
  const [ userid, username ] = getUseridFromInput(eventBus, ctx.payload);

  if (!(await handleListCommand(eventBus, ctx, userid))) {
    return;
  }

  if (!ctx.payload) {
    ctx.session.messagePurpose = { type: MessagePurposeType.WishlistOwnerUsername };

    await sendMessageAndMarkItForMarkupRemove(
      ctx,
      'reply',
      `–ß–µ–π —Å–ø–∏—Å–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è${
        isChatGroup(ctx) ? ' –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' : ''
      }`,
      Markup.inlineKeyboard([
        [ Markup.button.callback('üö´ –ù–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫', 'cancel_list') ],
      ]),
    );

    return;
  }

  await sendList(eventBus, ctx, userid, username, { shouldSendNotification: true });
};

/**
 * –ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ [–ø—Ä–æ–≤–µ—Ä–æ–∫]{@link handleListCommand}, –±–æ—Ç
 * [–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ø–∏—Å–æ–∫]{@link sendList}
 * @function listLinkHandler
 * @param {EventBus} eventBus –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -- –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–ø–∏—Å–∫–∞
 * @returns {Promise<void>}
 * @async
 */
const listLinkHandler = async (eventBus, ctx, userid) => {
  if (!(await handleListCommand(eventBus, ctx, userid))) {
    return;
  }
  await sendList(
    eventBus,
    ctx,
    ...getUseridFromInput(eventBus, userid),
    { shouldSendNotification: true },
  );
};

/** @type {ModuleConfigureFunction} */
const configure = (bot) => {
  const eventBus = inject(InjectionToken.EventBus);

  /** –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /list –≤—ã–∑–æ–≤ {@link listCommandHandler} */
  bot.command('list', async (ctx) => await listCommandHandler(eventBus, ctx));

  /**
   * –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –±–æ—Ç
   * [–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ø–∏—Å–æ–∫]{@link sendList}
   */
  bot.action(/^update_list (\d+)$/, async (ctx) => await sendList(
    eventBus,
    ctx,
    Number.parseInt(ctx.match[1]),
    eventBus.emit(Events.Usernames.GetUsernameByUserid, Number.parseInt(ctx.match[1])),
    { shouldSendNotification: true },
  ));

  /**
   * –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç
   * [–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–º. –ø–∞—Ä–∞–º–µ—Ç—Ä shouldForceNewMessages)]{@link sendList}
   */
  bot.action(/^force_list (\d+)$/, async (ctx) => await sendList(
    eventBus,
    ctx,
    Number.parseInt(ctx.match[1]),
    eventBus.emit(Events.Usernames.GetUsernameByUserid, Number.parseInt(ctx.match[1])),
    { shouldForceNewMessages: true },
  ));

  /**
   * –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –±–æ—Ç
   * [
   *   –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–º. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã shouldForceNewMessages –∏ isManualUpdate)
   * ]{@link sendList}
   */
  bot.action(/^manual_update (\d+)$/, async (ctx) => await sendList(
    eventBus,
    ctx,
    Number.parseInt(ctx.match[1]),
    eventBus.emit(Events.Usernames.GetUsernameByUserid, Number.parseInt(ctx.match[1])),
    { shouldForceNewMessages: true, isManualUpdate: true },
  ));

  /** –ü—Ä–∏ –≤—ã–ø—É—Å–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∑–∞–ø—É—Å–∫ {@link listLinkHandler} */
  eventBus.subscribe(
    Events.Wishlist.HandleListLink,
    async (ctx, userid) => await listLinkHandler(eventBus, ctx, userid),
  );
};

/** @type {ModuleMessageHandler} */
const messageHandler = (bot) => {
  const eventBus = inject(InjectionToken.EventBus);

  /**
   * –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
   * —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –∏–º—è
   * [–∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è]{@link getUseridFromInput} –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏, –µ—Å–ª–∏ –≤—Å–µ
   * [–ø—Ä–æ–≤–µ—Ä–∫–∏]{@link handleListCommand} –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è, –±–æ—Ç
   * [–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ø–∏—Å–æ–∫]{@link sendList}
   */
  bot.on('message', async (ctx, next) => {
    if (ctx.session.messagePurpose?.type === MessagePurposeType.WishlistOwnerUsername) {
      delete ctx.session.messagePurpose;

      const [ userid, username ] = getUseridFromInput(eventBus, ctx.message.text);

      if (!(await handleListCommand(eventBus, ctx, userid))) {
        return;
      }

      await sendList(eventBus, ctx, userid, username, { shouldSendNotification: true });
      return;
    }

    await next();
  });
};

export default { configure, messageHandler };
