import ListItemState from '@tmible/wishlist-common/constants/list-item-state';
import { Format, Markup } from 'telegraf';
import Events from '@tmible/wishlist-bot/architecture/events';
import isChatGroup from '@tmible/wishlist-bot/helpers/is-chat-group';
import getMentionFromUseridOrUsername from '@tmible/wishlist-bot/helpers/messaging/get-mention-from-userid-or-username';

/**
 * @typedef {import('telegraf').Context} Context
 * @typedef {import('telegraf').InlineKeyboardMarkup} InlineKeyboardMarkup
 * @typedef {import('@tmible/wishlist-common/event-bus').EventBus} EventBus
 * @typedef {import('@tmible/wishlist-bot/store/wishlist/get-list').ListItem} ListItem
 */
/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞
 * @typedef {object} Message
 * @property {number} itemId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 * @property {[ Format.FmtString, Markup<InlineKeyboardMarkup> ]} message
 *   –¢–µ–∫—Å—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–≤–µ–≥–æ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—Ä–∫—É
 * @function formParticipantsBlock
 * @param {ListItem} item –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π
 * @returns {Format.FmtString} –ë–ª–æ–∫ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
 */
const formParticipantsBlock = (item) => {
  const participantsMentions = item.participants.map(
    (username, i) => getMentionFromUseridOrUsername(item.participantsIds[i], username),
  );

  if (item.participants.length === 0) {
    return new Format.FmtString('üü¢ —Å–≤–æ–±–æ–¥–µ–Ω');
  }

  return item.state === ListItemState.BOOKED ?
    Format.join([ 'üî¥', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω', participantsMentions[0] ], ' ') :
    Format.join([ 'üü°', '—É—á–∞—Å—Ç–Ω–∏–∫–∏:', Format.join(participantsMentions, ', ') ], ' ');
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π
 * –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞ –≤—Å–µ –æ–ø—Ü–∏–∏, –∏–Ω–∞—á–µ –æ–ø—Ü–∏–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * –ø–æ–¥–∞—Ä–∫–∞ –∏ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ —Å–ø–∏—Å–æ–∫, –≤ –ø–æ–¥–∞—Ä–∫–µ
 * @function formReplyMarkup
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {ListItem} item –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π
 * @param {number} userid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -- –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–ø–∏—Å–∫–∞
 * @returns {Markup<InlineKeyboardMarkup>[]} –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
 */
const formReplyMarkup = (ctx, item, userid) => {
  const bookButton = isChatGroup(ctx) || item.state === ListItemState.FREE ?
    [ Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', `book ${item.id} ${userid}`) ] :
    [];

  const cooperateButton =
    (
      isChatGroup(ctx) ||
        item.state === ListItemState.FREE ||
        (
          item.state === ListItemState.COOPERATIVE &&
          !item.participantsIds.includes(ctx.from.id)
        )
    ) ?
      [ Markup.button.callback('–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', `cooperate ${item.id} ${userid}`) ] :
      [];

  const retireButton =
    (
      isChatGroup(ctx) ||
        (
          item.state !== ListItemState.FREE &&
          item.participantsIds.includes(ctx.from.id)
        )
    ) ?
      [ Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', `retire ${item.id} ${userid}`) ] :
      [];

  return [ bookButton, cooperateButton, retireButton ].some(({ length }) => length > 0) ?
    [ Markup.inlineKeyboard([
      ...(bookButton.length > 0 || cooperateButton.length > 0 ?
        [[ ...bookButton, ...cooperateButton ]] :
        []
      ),
      ...(retireButton.length > 0 ? [ retireButton ] : []),
    ]) ] :
    [];
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
 * –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * @function formMessages
 * @param {EventBus} eventBus –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -- –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–ø–∏—Å–∫–∞
 * @returns {Message[]} –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const formMessages = (eventBus, ctx, userid) => eventBus
  .emit(Events.Wishlist.GetList, userid)
  .map((item) => ({
    itemId: item.id,
    message: [
      Format.join(
        [
          Format.join(
            [
              new Format.FmtString(
                item.name,
                [{ offset: 0, length: item.name.length, type: 'bold' }],
              ),
              ...(
                item.description ?
                  [ new Format.FmtString(item.description, item.descriptionEntities) ] :
                  []
              ),
            ],
            '\n',
          ),
          ...(item.category ? [ `üî° ${item.category}` ] : []),
          formParticipantsBlock(item),
        ],
        '\n\n',
      ),
      ...formReplyMarkup(ctx, item, userid),
    ],
  }));

export default formMessages;
