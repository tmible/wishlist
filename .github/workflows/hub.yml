name: Hub CI/CD

on:
  workflow_call:

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      hub: ${{ steps.filter.outputs.hub }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - id: previous-sha
      run: 'echo "sha=$(git rev-list -n 1 ${{ github.ref }}^)" >> $GITHUB_OUTPUT'
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        base: ${{ steps.previous-sha.outputs.sha }}
        filters: |
          hub:
            - 'hub/**'

  lint:
    needs: changes
    if: ${{ needs.changes.outputs.hub == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/lint
      with:
        working-directory: hub

  tests:
    needs: changes
    if: ${{ needs.changes.outputs.hub == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/test
      with:
        working-directory: hub

  deploy:
    needs: [lint, tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hub
    steps:
    - uses: actions/checkout@v4
    - name: remove tests
      run: find ./src/ -type d -name __tests__ -exec rm -rf {} +
    - name: remove unnecessary files
      run: |
        find . -mindepth 1 -maxdepth 1 \
          -type f -not \( -name 'package.json' -or -name 'pnpm-lock.yaml' \) -exec rm -rf {} + -or \
          -type d -not -name 'src' -exec rm -rf {} +
    - name: deploy
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        SOURCE: hub
        TARGET: ${{ secrets.REMOTE_TARGET }}
        SCRIPT_AFTER: |
          cd ${{ secrets.REMOTE_TARGET }}/hub
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
          # pnpm
          export PNPM_HOME="/root/.local/share/pnpm"
          case ":$PATH:" in
            *":$PNPM_HOME:"*) ;;
            *) export PATH="$PNPM_HOME:$PATH" ;;
          esac
          # pnpm end
          pnpm add -g pnpm@$(pnpm pkg get engines.pnpm | tr -d "\"")
          nvm install $(pnpm pkg get engines.node | tr -d "\"")
          pnpm install --prod
          pnpm start:background
          pnpm restart:background
          # restart bot and portal so they reconnect
          cd ../bot
          pnpm restart:background
          cd ../portal
          pnpm restart:background
